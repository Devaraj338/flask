from flask import Flask,request,jsonify
from flask_sqlalchemy import SQLAlchemy

app=Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+mysqlconnector://root:2630@localhost/amrith'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)

class Azar(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    email = db.Column(db.VARCHAR(100), unique=True, nullable=False)


@app.route('/Getting', methods=['GET'])
def get_users():
    users = Azar.query.all()
    user_list = [{'id':user.id, 'username': user.username, 'email': user.email} for user in users]
    return jsonify({'users': user_list})

@app.route('/Getting/<int:user_id>', methods = ['GET'])
def get_user(user_id):
    user = Azar.query.get(user_id)
    if user is None:
        return jsonify({'message': 'User Not Found'})
    user_data = {'id': user.id, 'username': user.username, 'email': user.email}
    return jsonify({'user': user_data})


@app.route('/Getting', methods=['POST'])
def add_user():
    data = request.get_json()
    new_user = Azar(username=data['username'], email=data['email'])
    db.session.add(new_user)
    db.session.commit()
    return jsonify({'message': 'User added successfully'})
    
@app.route('/Getting/<int:user_id>', methods=['PUT'])
def update_user(user_id):
    user = Azar.query.get(user_id)
    if user is None:
        return jsonify({'error': 'User not found'}), 404

    data = request.get_json()
    user.username = data.get('username', user.username)
    user.email = data.get('email', user.email)
    db.session.commit()

    return jsonify({'message': 'User updated successfully'})

@app.route('/Getting/<int:user_id>', methods=['DELETE'])
def delete_user(user_id):
    user = Azar.query.get(user_id)
    if user is None:
        return jsonify({'error': 'User not found'}), 404

    db.session.delete(user)
    db.session.commit()

    return jsonify({'message': 'User deleted successfully'})

# run

if __name__=='__main_':
    with app.app_context():
        db.create_all()
    app.run(debug=True)
